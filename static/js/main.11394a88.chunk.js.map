{"version":3,"sources":["utils/GridUtils.ts","axios-firebase.ts","components/BrandGrid.tsx","components/CategoryGrid.tsx","components/SubcategoryGrid.tsx","components/PopupGrid.tsx","components/FloorGrid.tsx","components/NavTabs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GridUtils","inputTextValidator","props","rowData","field","axiosFirebase","axios","create","baseURL","process","brandGrid","g","_useState","useState","_useState2","Object","slicedToArray","subcategoryList","setSubcategoryList","_useState3","_useState4","selectedSubcategory","setSelectedSubCategory","_useState5","_useState6","selectedFloor","setSelectedFloor","_useState7","_useState8","floorList","setFloorList","_useState9","_useState10","brandName","setBrandName","tableRef","useRef","_useReducer","useReducer","state","action","type","concat","payload","map","x","Id","key","newValues","_useReducer2","brandList","dispatch","useEffect","get","then","res","brands","data","push","objectSpread","subcategories","floors","subcategoryEditor","subcategory","find","n","Subcategory","react_default","a","createElement","dropdown","options","label","value","onChange","e","onDropdownValueChange","style","width","placeholder","inputTextEditor","inputtext","onEditorValueChange","currentTarget","Fragment","useMemo","datatable","ref","column","header","editor","editorValidator","margin","textAlign","className","FloorName","primereact_button","maxWidth","icon","onClick","length","post","SubcategoryId","BrandName","FloorId","newBrand","name","catch","err","console","log","iconPos","current","exportCSV","categoryGrid","category","filter","categoryList","categoryName","setCategoryName","categories","Category","isValidCategory","onBlur","patch","onUpdateCategory","subcategoryGrid","subcategoryName","setSubcategoryName","setCategoryList","selectedCategory","setSelectedCategory","updateSubcategory","isValidSubcategory","onUpdateSubCategory","categoryEditor","CategoryId","subcat","popupGrid","popupTextList","sectionName","setSectionName","sectionContent","setSectionContent","popups","onUpdatePopup","isValidPopup","popup","Content","Section","contentEditor","minHeight","onTextChange","htmlValue","marginLeft","title","floorGrid","floor","floorName","setFloorName","floorNumber","setFloorNumber","isValidFloor","FloorNumber","onUpdateFloor","keyfilter","parseInt","navTabs","activeIndex","setActiveIndex","tabview","onTabChange","index","BrandGrid","CategoryGrid","SubcategoryGrid","PopupGrid","FloorGrid","app","NavTabs","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11394a88.chunk.js","sourcesContent":["import RowDataProps from \"../Interfaces/RowDataProps\";\nimport Keyed from \"../Interfaces/Keyed\";\n\nexport default class GridUtils<T extends Keyed> {\n  public inputTextValidator = (props: RowDataProps<T>): boolean => {\n    const value = props.rowData[props.field];\n    if (value) return true;\n    else return false;\n  };\n}\n","import axios from \"axios\";\n\nconst axiosFirebase = axios.create({\n  baseURL: process.env.REACT_APP_DATABASE_URL\n});\n\nexport default axiosFirebase;\n","import React, { useState, useReducer, useMemo, useEffect, useRef } from \"react\";\nimport IBrand from \"../Interfaces/Brand\";\nimport ISubcategory from \"../Interfaces/Subcategory\";\nimport IFloor from \"../Interfaces/Floor\";\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nimport RowDataProps from \"../Interfaces/RowDataProps\";\nimport GridUtils from \"../utils/GridUtils\";\nimport CrudAction from \"../Interfaces/CrudAction\";\nimport axiosFirebase from \"../axios-firebase\";\nimport { Button } from \"primereact/button\";\n\n// component begins\nconst brandGrid = () => {\n  const g = new GridUtils<IBrand>();\n  const [subcategoryList, setSubcategoryList] = useState<ISubcategory[]>([]);\n  const [selectedSubcategory, setSelectedSubCategory] = useState<ISubcategory>({} as ISubcategory);\n  const [selectedFloor, setSelectedFloor] = useState<IFloor>({} as IFloor);\n  const [floorList, setFloorList] = useState<IFloor[]>([]);\n  const [brandName, setBrandName] = useState<string>(\"\");\n  const tableRef = useRef<DataTable>(null);\n\n  const initialState: IBrand[] = [];\n\n  const brandReducer = (state: IBrand[], action: CrudAction<IBrand>) => {\n    switch (action.type) {\n      case \"ADD\":\n        return state.concat(action.payload);\n\n      case \"SET\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return state.map(x => (x.Id === action.payload.key ? action.payload.newValues : x));\n\n      default:\n        return state;\n    }\n  };\n\n  const [brandList, dispatch] = useReducer(brandReducer, initialState);\n\n  useEffect(() => {\n    axiosFirebase.get(\"brands.json\").then(res => {\n      const brands: IBrand[] = [];\n      for (const key in res.data) {\n        brands.push({ Id: key, ...res.data[key] });\n      }\n\n      dispatch({ type: \"SET\", payload: brands });\n    });\n\n    axiosFirebase.get(\"subcategories.json\").then(res => {\n      const subcategories: ISubcategory[] = [];\n      for (const key in res.data) {\n        subcategories.push({ Id: key, ...res.data[key] });\n      }\n\n      setSubcategoryList(subcategories);\n    });\n\n    axiosFirebase.get(\"floors.json\").then(res => {\n      const floors: IFloor[] = [];\n      for (const key in res.data) {\n        floors.push({ Id: key, ...res.data[key] });\n      }\n\n      setFloorList(floors);\n    });\n  }, []);\n\n  const onEditorValueChange = (props: RowDataProps<IBrand>, value: any) => {\n    props.rowData[props.field] = value;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n    });\n  };\n\n  const onDropdownValueChange = (props: RowDataProps<IBrand>, value: any) => {\n    const subcategory: ISubcategory = subcategoryList.find((n: ISubcategory) => n.Id === value)!;\n\n    props.rowData[\"SubcategoryId\"] = subcategory.Id;\n    props.rowData[\"Subcategory\"] = subcategory.Subcategory;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n    });\n  };\n\n  const subcategoryEditor = (props: RowDataProps<IBrand>): React.ReactElement => {\n    const subcategory: ISubcategory = subcategoryList.find(\n      (n: ISubcategory) => n.Subcategory === props.rowData[props.field]\n    )!;\n    return (\n      <Dropdown\n        options={subcategoryList.map((x: ISubcategory) => {\n          return { label: x.Subcategory, value: x.Id };\n        })}\n        onChange={e => onDropdownValueChange(props, e.value)}\n        style={{ width: \"100%\" }}\n        placeholder=\"Select a subcategory\"\n        value={subcategory.Id}\n      />\n    );\n  };\n\n  const inputTextEditor = (props: RowDataProps<IBrand>): React.ReactElement => {\n    return (\n      <InputText\n        type=\"text\"\n        value={props.rowData[props.field]}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => onEditorValueChange(props, e.currentTarget.value)}\n      />\n    );\n  };\n\n  const isValidBrand = (): boolean => {\n    return selectedSubcategory.Subcategory.length > 0 && brandName.length > 0 && selectedFloor.FloorName.length > 0;\n  };\n\n  const newBrandHandler = () => {\n    if (!isValidBrand) {\n      return;\n    }\n\n    axiosFirebase\n      .post(\"brands.json\", {\n        Id: \"\",\n        SubcategoryId: selectedSubcategory.Id,\n        Subcategory: selectedSubcategory.Subcategory,\n        BrandName: brandName,\n        FloorId: selectedFloor.Id,\n        FloorName: selectedFloor.FloorName\n      } as IBrand)\n      .then(res => {\n        const newBrand: IBrand = {\n          Id: res.data.name,\n          SubcategoryId: selectedSubcategory.Id,\n          Subcategory: selectedSubcategory.Subcategory,\n          BrandName: brandName,\n          FloorId: selectedFloor.Id,\n          FloorName: selectedFloor.FloorName\n        };\n        dispatch({ type: \"ADD\", payload: newBrand });\n        setBrandName(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const doExport = () => {\n    tableRef.current!.exportCSV();\n  };\n\n  return (\n    <>\n      {useMemo(\n        () => (\n          <DataTable value={brandList} ref={tableRef}>\n            <Column\n              field=\"BrandName\"\n              header=\"Brand Name\"\n              editor={inputTextEditor}\n              editorValidator={g.inputTextValidator}\n            />\n            <Column field=\"Subcategory\" header=\"Subcategory\" editor={subcategoryEditor} />\n            <Column field=\"FloorName\" header=\"Floor\" />\n          </DataTable>\n        ),\n        [brandList]\n      )}\n\n      <h2 style={{ margin: 10, textAlign: \"left\" }}>Add a Brand</h2>\n      <div className=\"table-row\">\n        <div className=\"table-column\">\n          <InputText\n            placeholder=\"Brand Name\"\n            value={brandName}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => setBrandName(e.currentTarget.value)}\n          />\n        </div>\n        <div className=\"table-column\">\n          <Dropdown\n            options={subcategoryList.map((x: ISubcategory) => {\n              return { label: x.Subcategory, value: x.Id };\n            })}\n            value={selectedSubcategory.Id}\n            placeholder=\"Select a Subcategory\"\n            onChange={e => setSelectedSubCategory(subcategoryList.find(x => x.Id === e.value)!)}\n          />\n        </div>\n        <div className=\"table-column\">\n          <Dropdown\n            options={floorList.map((x: IFloor) => {\n              return { label: x.FloorName, value: x.Id };\n            })}\n            value={selectedFloor.Id}\n            placeholder=\"Select a Floor\"\n            onChange={e => setSelectedFloor(floorList.find(x => x.Id === e.value)!)}\n          />\n        </div>\n        <div className=\"table-column-end\">\n          <Button style={{ maxWidth: 180 }} label=\"Add Brand\" icon=\"pi pi-check\" onClick={newBrandHandler} />\n        </div>\n      </div>\n      <div className=\"table-row\">\n        <div className=\"table-column\">\n          <Button type=\"button\" icon=\"pi pi-external-link\" iconPos=\"left\" label=\"CSV\" onClick={doExport} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default brandGrid;\n","import React, { useReducer, useMemo, useEffect, useState } from \"react\";\nimport ICategory from \"../Interfaces/Category\";\n\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\n\nimport RowDataProps from \"../Interfaces/RowDataProps\";\nimport axiosFirebase from \"../axios-firebase\";\n\ntype CategoryAction =\n  | { type: \"ADD\"; payload: ICategory }\n  | { type: \"SET\"; payload: ICategory[] }\n  | { type: \"UPDATE\"; payload: { key: string; category: ICategory } }\n  | { type: \"DELETE\"; key: string };\n\nconst categoryGrid = () => {\n  const categoryReducer = (state: ICategory[], action: CategoryAction) => {\n    switch (action.type) {\n      case \"ADD\":\n        return state.concat(action.payload);\n\n      case \"SET\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return state.map(x => (x.Id === action.payload.key ? action.payload.category : x));\n\n      case \"DELETE\":\n        return state.filter(category => category.Id !== action.key);\n    }\n  };\n\n  const initialState: ICategory[] = [];\n  const [categoryList, dispatch] = useReducer(categoryReducer, initialState);\n  const [categoryName, setCategoryName] = useState(\"\");\n\n  // load the category list\n  useEffect(() => {\n    axiosFirebase.get(\"categories.json\").then(res => {\n      const categories: ICategory[] = [];\n      for (const key in res.data) {\n        categories.push({ Id: key, Category: res.data[key].Category });\n      }\n\n      dispatch({ type: \"SET\", payload: categories });\n    });\n  }, []);\n\n  const onUpdateCategory = (props: RowDataProps<ICategory>, value: any) => {\n    props.rowData[props.field] = value;\n    if (!isValidCategory(props.rowData)) return;\n\n    axiosFirebase\n      .patch(`categories/${props.rowData[\"Id\"]}.json`, { Category: value })\n      .then(res => {\n        dispatch({\n          type: \"UPDATE\",\n          payload: { key: props.rowData[\"Id\"], category: props.rowData }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const onEditorValueChange = (props: RowDataProps<ICategory>, value: any) => {\n    props.rowData[props.field] = value;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], category: props.rowData }\n    });\n  };\n\n  const isValidCategory = (category: ICategory) => {\n    return category.Category.length > 0;\n  };\n\n  const inputTextValidator = (props: RowDataProps<ICategory>): boolean => {\n    const value = props.rowData[props.field];\n    if (value) return true;\n    else return false;\n  };\n\n  const inputTextEditor = (props: RowDataProps<ICategory>): React.ReactElement => {\n    return (\n      <InputText\n        type=\"text\"\n        value={props.rowData[props.field]}\n        onBlur={(e: React.FormEvent<HTMLInputElement>) => onUpdateCategory(props, e.currentTarget.value)}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => onEditorValueChange(props, e.currentTarget.value)}\n      />\n    );\n  };\n\n  const newCategoryHandler = () => {\n    axiosFirebase\n      .post(\"categories.json\", { Category: categoryName })\n      .then(res => {\n        const category: ICategory = { Id: res.data.name, Category: categoryName };\n        dispatch({ type: \"ADD\", payload: category });\n        setCategoryName(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <>\n      {useMemo(\n        () => (\n          <DataTable value={categoryList}>\n            <Column\n              field=\"Category\"\n              header=\"Category Name\"\n              editor={inputTextEditor}\n              editorValidator={inputTextValidator}\n            />\n          </DataTable>\n        ),\n        [categoryList]\n      )}\n      <InputText\n        placeholder=\"Category Name\"\n        value={categoryName}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => setCategoryName(e.currentTarget.value)}\n      />\n      <Button label=\"Add Category\" icon=\"pi pi-check\" onClick={newCategoryHandler} />\n    </>\n  );\n};\n\nexport default categoryGrid;\n","import React, { useReducer, useMemo, useEffect, useState } from \"react\";\nimport ISubcategory from \"../Interfaces/Subcategory\";\n\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\n\nimport RowDataProps from \"../Interfaces/RowDataProps\";\nimport axiosFirebase from \"../axios-firebase\";\nimport ICategory from \"../Interfaces/Category\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nimport \"./table.css\";\n\ntype SubcategoryAction =\n  | { type: \"ADD\"; payload: ISubcategory }\n  | { type: \"SET\"; payload: ISubcategory[] }\n  | { type: \"UPDATE\"; payload: { key: string; subcategory: ISubcategory } }\n  | { type: \"DELETE\"; key: string };\n\nconst subcategoryGrid = () => {\n  const subcategoryReducer = (state: ISubcategory[], action: SubcategoryAction): ISubcategory[] => {\n    switch (action.type) {\n      case \"ADD\":\n        return state.concat(action.payload);\n\n      case \"SET\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return state.map(x => (x.Id === action.payload.key ? action.payload.subcategory : x));\n\n      case \"DELETE\":\n        return state.filter(subcategory => subcategory.Id !== action.key);\n    }\n  };\n\n  const initialState: ISubcategory[] = [];\n  const [subcategoryList, dispatch] = useReducer(subcategoryReducer, initialState);\n  const [subcategoryName, setSubcategoryName] = useState(\"\");\n  const [categoryList, setCategoryList] = useState<ICategory[]>([]);\n  const [selectedCategory, setSelectedCategory] = useState<ICategory>({} as ICategory);\n\n  // load the subcategory list\n  useEffect(() => {\n    axiosFirebase.get(\"subcategories.json\").then(res => {\n      const subcategories: ISubcategory[] = [];\n      for (const key in res.data) {\n        subcategories.push({ Id: key, ...res.data[key] });\n      }\n\n      dispatch({ type: \"SET\", payload: subcategories });\n    });\n    axiosFirebase.get(\"categories.json\").then(res => {\n      const categories: ICategory[] = [];\n      for (const key in res.data) {\n        categories.push({ Id: key, Category: res.data[key].Category });\n      }\n\n      setCategoryList(categories);\n    });\n  }, []);\n\n  const onUpdateSubCategory = (props: RowDataProps<ISubcategory>, value: any) => {\n    props.rowData[props.field] = value;\n    if (!isValidSubcategory(props.rowData)) return;\n\n    updateSubcategory(props);\n  };\n\n  const updateSubcategory = (props: RowDataProps<ISubcategory>) => {\n    axiosFirebase\n      .patch(`subcategories/${props.rowData[\"Id\"]}.json`, props.rowData)\n      .then(res => {\n        dispatch({\n          type: \"UPDATE\",\n          payload: { key: props.rowData[\"Id\"], subcategory: props.rowData }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const onEditorValueChange = (props: RowDataProps<ISubcategory>, value: any) => {\n    props.rowData[props.field] = value;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], subcategory: props.rowData }\n    });\n  };\n\n  const isValidSubcategory = (subcategory: ISubcategory): boolean => {\n    if (subcategory.Subcategory.length === 0 || subcategory.Category === null || subcategory.Category!.length === 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const inputTextValidator = (props: RowDataProps<ISubcategory>): boolean => {\n    const value = props.rowData[props.field];\n    if (value) return true;\n    else return false;\n  };\n\n  const inputTextEditor = (props: RowDataProps<ISubcategory>): React.ReactElement => {\n    return (\n      <InputText\n        type=\"text\"\n        value={props.rowData[props.field]}\n        onBlur={(e: React.FormEvent<HTMLInputElement>) => onUpdateSubCategory(props, e.currentTarget.value)}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => onEditorValueChange(props, e.currentTarget.value)}\n      />\n    );\n  };\n\n  const newSubCategoryHandler = () => {\n    if (!isValidSubcategory) {\n      return;\n    }\n\n    axiosFirebase\n      .post(\"subcategories.json\", {\n        Category: selectedCategory.Category,\n        CategoryId: selectedCategory.Id,\n        Subcategory: subcategoryName\n      })\n      .then(res => {\n        const subcat: ISubcategory = {\n          Id: res.data.name,\n          Category: selectedCategory.Category,\n          CategoryId: selectedCategory.Id,\n          Subcategory: subcategoryName\n        };\n        dispatch({ type: \"ADD\", payload: subcat });\n        setSubcategoryName(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const onDropdownValueChange = (props: RowDataProps<ISubcategory>, value: any) => {\n    const category: ICategory = categoryList.find((n: ICategory) => n.Id === value)!;\n\n    props.rowData[\"CategoryId\"] = category.Id;\n    props.rowData[\"Category\"] = category.Category;\n\n    if (isValidSubcategory(props.rowData)) {\n      updateSubcategory(props);\n    }\n  };\n\n  const categoryEditor = (props: RowDataProps<ISubcategory>): React.ReactElement => {\n    const category: ICategory = categoryList.find((n: ICategory) => n.Category === props.rowData[props.field])!;\n    return (\n      <Dropdown\n        options={categoryList.map((x: ICategory) => {\n          return { label: x.Category, value: x.Id };\n        })}\n        onChange={e => onDropdownValueChange(props, e.value)}\n        style={{ width: \"100%\" }}\n        placeholder=\"Select a category\"\n        value={category.Id}\n      />\n    );\n  };\n\n  return (\n    <>\n      {useMemo(\n        () => (\n          <DataTable value={subcategoryList}>\n            <Column\n              field=\"Subcategory\"\n              header=\"Subcategory Name\"\n              editor={inputTextEditor}\n              editorValidator={inputTextValidator}\n            />\n            <Column field=\"Category\" header=\"Category\" editor={categoryEditor} />\n          </DataTable>\n        ),\n        [subcategoryList]\n      )}\n      <h2 style={{ margin: 10, textAlign: \"left\" }}>Add a Subcategory</h2>\n      <div className=\"table-row\">\n        <div className=\"table-column\">\n          <InputText\n            placeholder=\"Subcategory Name\"\n            value={subcategoryName}\n            onChange={(e: React.FormEvent<HTMLInputElement>) => setSubcategoryName(e.currentTarget.value)}\n          />\n        </div>\n        <div className=\"table-column\">\n          <Dropdown\n            options={categoryList.map((x: ICategory) => {\n              return { label: x.Category, value: x.Id };\n            })}\n            value={selectedCategory.Id}\n            placeholder=\"Select a Category\"\n            onChange={e => setSelectedCategory(categoryList.find(x => x.Id === e.value)!)}\n          />\n        </div>\n        <div className=\"table-column-end\">\n          <Button\n            style={{ maxWidth: 180 }}\n            label=\"Add Subcategory\"\n            icon=\"pi pi-check\"\n            onClick={newSubCategoryHandler}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default subcategoryGrid;\n","import React, { useReducer, useMemo, useEffect, useState } from \"react\";\nimport IPopupText from \"../Interfaces/PopupText\";\n\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { Editor } from \"primereact/editor\";\nimport { Button } from \"primereact/button\";\nimport { InputText } from \"primereact/inputtext\";\n\nimport RowDataProps from \"../Interfaces/RowDataProps\";\nimport axiosFirebase from \"../axios-firebase\";\nimport CrudAction from \"../Interfaces/CrudAction\";\n\nconst popupGrid = () => {\n  const popupTextReducer = (state: IPopupText[], action: CrudAction<IPopupText>) => {\n    switch (action.type) {\n      case \"ADD\":\n        return state.concat(action.payload);\n\n      case \"SET\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return state.map(x => (x.Id === action.payload.key ? action.payload.newValues : x));\n\n      case \"DELETE\":\n        return state.filter(category => category.Id !== action.key);\n    }\n  };\n\n  const initialState: IPopupText[] = [];\n  const [popupTextList, dispatch] = useReducer(popupTextReducer, initialState);\n  const [sectionName, setSectionName] = useState(\"\");\n  const [sectionContent, setSectionContent] = useState(\"\");\n\n  // load the popup list\n  useEffect(() => {\n    axiosFirebase.get(\"popuptext.json\").then(res => {\n      const popups: IPopupText[] = [];\n      for (const key in res.data) {\n        popups.push({ Id: key, ...res.data[key] });\n      }\n\n      dispatch({ type: \"SET\", payload: popups });\n    });\n  }, []);\n\n  const onUpdatePopup = (props: RowDataProps<IPopupText>, value: any) => {\n    props.rowData[props.field] = value;\n    if (!isValidPopup(props.rowData)) return;\n\n    axiosFirebase\n      .patch(`popuptext/${props.rowData[\"Id\"]}.json`, props.rowData)\n      .then(res => {\n        dispatch({\n          type: \"UPDATE\",\n          payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const onEditorValueChange = (props: RowDataProps<IPopupText>, value: any) => {\n    props.rowData[props.field] = value;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n    });\n  };\n\n  const isValidPopup = (popup: IPopupText): boolean => {\n    if (popup.Content.length === 0 || popup.Section.length === 0) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const inputTextValidator = (props: RowDataProps<IPopupText>): boolean => {\n    const value = props.rowData[props.field];\n    if (value) return true;\n    else return false;\n  };\n\n  const inputTextEditor = (props: RowDataProps<IPopupText>): React.ReactElement => {\n    return (\n      <InputText\n        type=\"text\"\n        value={props.rowData[props.field]}\n        onBlur={(e: React.FormEvent<HTMLInputElement>) => onUpdatePopup(props, e.currentTarget.value)}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => onEditorValueChange(props, e.currentTarget.value)}\n      />\n    );\n  };\n\n  const contentEditor = (props: RowDataProps<IPopupText>): React.ReactElement => {\n    return (\n      <>\n        <Editor\n          style={{ minHeight: 200 }}\n          value={props.rowData[props.field]}\n          onTextChange={e => setSectionContent(e.htmlValue === null ? \"\" : e.htmlValue)}\n        />\n        <Button\n          style={{ maxWidth: 50, marginLeft: 10 }}\n          title=\"Save\"\n          onClick={e => onUpdatePopup(props, sectionContent)}\n          icon=\"pi pi-check\"\n        />\n        <Button\n          style={{ marginLeft: 10, maxWidth: 50 }}\n          onClick={e => console.log(e)}\n          title=\"Cancel\"\n          icon=\"pi pi-times\"\n        />\n      </>\n    );\n  };\n\n  const newPopupHandler = () => {\n    axiosFirebase\n      .post(\"popuptext.json\", { Section: sectionName, Content: \"\" })\n      .then(res => {\n        const popup: IPopupText = { Id: res.data.name, Section: sectionName, Content: \"\" };\n        dispatch({ type: \"ADD\", payload: popup });\n        setSectionName(\"\");\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <>\n      {useMemo(\n        () => (\n          <DataTable value={popupTextList}>\n            <Column field=\"Section\" header=\"Section\" editor={inputTextEditor} editorValidator={inputTextValidator} />\n            <Column field=\"Content\" header=\"Content\" editor={contentEditor} />\n          </DataTable>\n        ),\n        [popupTextList, sectionName, sectionContent]\n      )}\n      <InputText\n        placeholder=\"Section Name\"\n        value={sectionName}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => setSectionName(e.currentTarget.value)}\n      />\n      <Button label=\"Add Popup\" icon=\"pi pi-check\" onClick={newPopupHandler} />\n    </>\n  );\n};\n\nexport default popupGrid;\n","import React, { useReducer, useMemo, useEffect, useState } from \"react\";\nimport IFloor from \"../Interfaces/Floor\";\n\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Button } from \"primereact/button\";\n\nimport RowDataProps from \"../Interfaces/RowDataProps\";\nimport axiosFirebase from \"../axios-firebase\";\nimport CrudAction from \"../Interfaces/CrudAction\";\n\nconst floorGrid = () => {\n  const floorReducer = (state: IFloor[], action: CrudAction<IFloor>) => {\n    switch (action.type) {\n      case \"ADD\":\n        return state.concat(action.payload);\n\n      case \"SET\":\n        return action.payload;\n\n      case \"UPDATE\":\n        return state.map(x => (x.Id === action.payload.key ? action.payload.newValues : x));\n\n      case \"DELETE\":\n        return state.filter(floor => floor.Id !== action.key);\n    }\n  };\n\n  const initialState: IFloor[] = [];\n  const [floorList, dispatch] = useReducer(floorReducer, initialState);\n  const [floorName, setFloorName] = useState(\"\");\n  const [floorNumber, setFloorNumber] = useState(0);\n\n  // load the floor list\n  useEffect(() => {\n    axiosFirebase.get(\"floors.json\").then(res => {\n      const floors: IFloor[] = [];\n      for (const key in res.data) {\n        floors.push({ Id: key, ...res.data[key] });\n      }\n\n      dispatch({ type: \"SET\", payload: floors });\n    });\n  }, []);\n\n  const onUpdateFloor = (props: RowDataProps<IFloor>, value: any) => {\n    props.rowData[props.field] = value;\n    if (!isValidFloor(props.rowData)) return;\n\n    axiosFirebase\n      .patch(`floors/${props.rowData[\"Id\"]}.json`, props.rowData)\n      .then(res => {\n        dispatch({\n          type: \"UPDATE\",\n          payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const onEditorValueChange = (props: RowDataProps<IFloor>, value: any) => {\n    props.rowData[props.field] = value;\n    dispatch({\n      type: \"UPDATE\",\n      payload: { key: props.rowData[\"Id\"], newValues: props.rowData }\n    });\n  };\n\n  const isValidFloor = (floor: IFloor): boolean => {\n    return floor.FloorName.length >= 0 && floor.FloorNumber > 0;\n  };\n\n  const inputTextValidator = (props: RowDataProps<IFloor>): boolean => {\n    const value = props.rowData[props.field];\n    if (value) return true;\n    else return false;\n  };\n\n  const inputTextEditor = (props: RowDataProps<IFloor>): React.ReactElement => {\n    return (\n      <InputText\n        type=\"text\"\n        value={props.rowData[props.field]}\n        onBlur={(e: React.FormEvent<HTMLInputElement>) => onUpdateFloor(props, e.currentTarget.value)}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => onEditorValueChange(props, e.currentTarget.value)}\n      />\n    );\n  };\n\n  const newFloorHandler = () => {\n    axiosFirebase\n      .post(\"floors.json\", { FloorName: floorName, FloorNumber: floorNumber } as IFloor)\n      .then(res => {\n        const floor: IFloor = { Id: res.data.name, FloorName: floorName, FloorNumber: floorNumber };\n        dispatch({ type: \"ADD\", payload: floor });\n        setFloorName(\"\");\n        setFloorNumber(floor.FloorNumber + 1);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <>\n      {useMemo(\n        () => (\n          <DataTable value={floorList}>\n            <Column\n              field=\"FloorName\"\n              header=\"Floor Name\"\n              editor={inputTextEditor}\n              editorValidator={inputTextValidator}\n            />\n            <Column\n              field=\"FloorNumber\"\n              header=\"Floor #\"\n              editor={inputTextEditor}\n              editorValidator={inputTextValidator}\n            />\n          </DataTable>\n        ),\n        [floorList]\n      )}\n      <InputText\n        placeholder=\"Floor Name\"\n        value={floorName}\n        onChange={(e: React.FormEvent<HTMLInputElement>) => setFloorName(e.currentTarget.value)}\n      />\n      <InputText\n        placeholder=\"Floor Number\"\n        value={floorNumber}\n        keyfilter=\"pint\"\n        onChange={(e: React.FormEvent<HTMLInputElement>) => setFloorNumber(parseInt(e.currentTarget.value))}\n      />\n      <Button label=\"Add Floor\" icon=\"pi pi-check\" onClick={newFloorHandler} />\n    </>\n  );\n};\n\nexport default floorGrid;\n","import React, { useState } from \"react\";\nimport { TabView, TabPanel } from \"primereact/tabview\";\n\nimport BrandGrid from \"./BrandGrid\";\nimport CategoryGrid from \"./CategoryGrid\";\nimport SubcategoryGrid from \"./SubcategoryGrid\";\nimport PopupGrid from \"./PopupGrid\";\nimport FloorGrid from \"./FloorGrid\";\n\nconst navTabs = () => {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  return (\n    <TabView activeIndex={activeIndex} onTabChange={e => setActiveIndex(e.index)}>\n      <TabPanel header=\"Brands\">\n        <BrandGrid />\n      </TabPanel>\n      <TabPanel header=\"Categories\">\n        <CategoryGrid />\n      </TabPanel>\n      <TabPanel header=\"Subcategories\">\n        <SubcategoryGrid />\n      </TabPanel>\n      <TabPanel header=\"Popup Texts\">\n        <PopupGrid />\n      </TabPanel>\n      <TabPanel header=\"Floors\">\n        <FloorGrid />\n      </TabPanel>\n    </TabView>\n  );\n};\n\nexport default navTabs;\n","import React, { Component } from \"react\";\nimport \"primereact/resources/themes/nova-light/theme.css\";\nimport \"primereact/resources/primereact.min.css\";\nimport \"primeicons/primeicons.css\";\nimport \"./App.css\";\nimport NavTabs from \"./components/NavTabs\";\n\nconst app = () => {\n  return (\n    <div className=\"App\">\n      <NavTabs />\n    </div>\n  );\n};\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}